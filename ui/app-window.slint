import { VerticalBox, HorizontalBox, Button, Slider, Palette, StandardButton } from "std-widgets.slint";

export component MainWindow inherits Window {
    width: 800px;
    height: 600px;
    title: "Circle Drawer (Image Canvas)";

    in-out property <image> canvas-image;
    in property <float> current-radius;
    in property <color> current-color;

    callback start-drag(x: float, y: float);
    callback update-drag(x: float, y: float);
    callback end-drag(x: float, y: float);
    callback undo();
    callback redo();
    callback apply-config(color: color);

    VerticalBox {
        spacing: 8px;
        padding: 8px;

        HorizontalBox {
            spacing: 10px;
            Button {
                text: "Undo";
                clicked => root.undo();
            }

            Button {
                text: "Redo";
                clicked => root.redo();
            }
        }

        // Canvas
        TouchArea {
            width: 100%;
            height: 100%;
            image := Image {
                source: root.canvas-image;
                width: 100%;
                height: 100%;
            }

            pointer-event(event) => {
                if event.button == PointerEventButton.right {
                    config_popup.x = self.mouse-x;
                    config_popup.y = self.mouse-y;
                    config_popup.visible = true;
                } else {
                    if event.kind == PointerEventKind.down {
                        root.start-drag(self.mouse-x / 1px,self.mouse-y / 1px);
                    } else if event.kind == PointerEventKind.move {
                        root.update-drag(self.mouse-x / 1px,self.mouse-y / 1px);
                    } else if event.kind == PointerEventKind.up {
                        root.end-drag(self.mouse-x / 1px,self.mouse-y / 1px);
                    }
                }
            }
        }
    }

    config_popup := Rectangle {
        visible: false;
        x: (root.width - self.width) / 2;
        y: 100px;
        width: min(circle_dialog.preferred-width,root.width - 80px);
        height: min(circle_dialog.preferred-height + 80px,root.height);

        Rectangle {
            background: Palette.background;
            border-color: Palette.border;
            border-width: 1px;

            circle_dialog := Dialog {
                title: "Circle Configuration";
                property <float> temp_radius: root.current-radius;
                property <color> temp_color: root.current-color;

                VerticalBox {
                    spacing: 8px;
                    padding: 8px;
                    // Text {
                    //     text: "Radius:";
                    // }

                    // Slider {
                    //     minimum: 5;
                    //     maximum: 100;
                    //     value: temp_radius;
                    //     changed(value) => {
                    //         temp_radius = value;
                    //     }
                    // }

                    Text {
                        text: "Color (Red):";
                    }

                    Slider {
                        minimum: 0;
                        maximum: 255;
                        value: temp_color.red * 255;
                        changed(value) => {
                            temp_color = rgb(value,0,0);
                        }
                    }

                    HorizontalBox {
                        spacing: 8px;
                        StandardButton {
                            kind: yes;
                            clicked => {
                                root.apply-config(temp_color);
                                config_popup.visible = false;
                            }
                        }

                        StandardButton {
                            kind: no;
                            clicked => {
                                config_popup.visible = false;
                            }
                        }
                    }
                }
            }
        }
    }
}
